/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FactureService } from "../facture.service";
import { FactureCreateInput } from "./FactureCreateInput";
import { Facture } from "./Facture";
import { FactureFindManyArgs } from "./FactureFindManyArgs";
import { FactureWhereUniqueInput } from "./FactureWhereUniqueInput";
import { FactureUpdateInput } from "./FactureUpdateInput";
import { CommandeFindManyArgs } from "../../commande/base/CommandeFindManyArgs";
import { Commande } from "../../commande/base/Commande";
import { CommandeWhereUniqueInput } from "../../commande/base/CommandeWhereUniqueInput";

export class FactureControllerBase {
  constructor(protected readonly service: FactureService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Facture })
  async createFacture(
    @common.Body() data: FactureCreateInput
  ): Promise<Facture> {
    return await this.service.createFacture({
      data: data,
      select: {
        createdAt: true,
        dateFacture: true,
        id: true,
        montantTotal: true,
        numeroFacture: true,
        statutPaiment: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Facture] })
  @ApiNestedQuery(FactureFindManyArgs)
  async factures(@common.Req() request: Request): Promise<Facture[]> {
    const args = plainToClass(FactureFindManyArgs, request.query);
    return this.service.factures({
      ...args,
      select: {
        createdAt: true,
        dateFacture: true,
        id: true,
        montantTotal: true,
        numeroFacture: true,
        statutPaiment: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Facture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async facture(
    @common.Param() params: FactureWhereUniqueInput
  ): Promise<Facture | null> {
    const result = await this.service.facture({
      where: params,
      select: {
        createdAt: true,
        dateFacture: true,
        id: true,
        montantTotal: true,
        numeroFacture: true,
        statutPaiment: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Facture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFacture(
    @common.Param() params: FactureWhereUniqueInput,
    @common.Body() data: FactureUpdateInput
  ): Promise<Facture | null> {
    try {
      return await this.service.updateFacture({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dateFacture: true,
          id: true,
          montantTotal: true,
          numeroFacture: true,
          statutPaiment: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Facture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFacture(
    @common.Param() params: FactureWhereUniqueInput
  ): Promise<Facture | null> {
    try {
      return await this.service.deleteFacture({
        where: params,
        select: {
          createdAt: true,
          dateFacture: true,
          id: true,
          montantTotal: true,
          numeroFacture: true,
          statutPaiment: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/commande_id")
  @ApiNestedQuery(CommandeFindManyArgs)
  async findCommandeId(
    @common.Req() request: Request,
    @common.Param() params: FactureWhereUniqueInput
  ): Promise<Commande[]> {
    const query = plainToClass(CommandeFindManyArgs, request.query);
    const results = await this.service.findCommandeId(params.id, {
      ...query,
      select: {
        ateCommande: true,

        client_id: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        etat: true,
        id: true,
        montantTotal: true,
        numeroCommande: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/commande_id")
  async connectCommandeId(
    @common.Param() params: FactureWhereUniqueInput,
    @common.Body() body: CommandeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      commande_id: {
        connect: body,
      },
    };
    await this.service.updateFacture({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/commande_id")
  async updateCommandeId(
    @common.Param() params: FactureWhereUniqueInput,
    @common.Body() body: CommandeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      commande_id: {
        set: body,
      },
    };
    await this.service.updateFacture({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/commande_id")
  async disconnectCommandeId(
    @common.Param() params: FactureWhereUniqueInput,
    @common.Body() body: CommandeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      commande_id: {
        disconnect: body,
      },
    };
    await this.service.updateFacture({
      where: params,
      data,
      select: { id: true },
    });
  }
}
