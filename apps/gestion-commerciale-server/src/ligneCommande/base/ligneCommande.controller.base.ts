/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LigneCommandeService } from "../ligneCommande.service";
import { LigneCommandeCreateInput } from "./LigneCommandeCreateInput";
import { LigneCommande } from "./LigneCommande";
import { LigneCommandeFindManyArgs } from "./LigneCommandeFindManyArgs";
import { LigneCommandeWhereUniqueInput } from "./LigneCommandeWhereUniqueInput";
import { LigneCommandeUpdateInput } from "./LigneCommandeUpdateInput";

export class LigneCommandeControllerBase {
  constructor(protected readonly service: LigneCommandeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LigneCommande })
  async createLigneCommande(
    @common.Body() data: LigneCommandeCreateInput
  ): Promise<LigneCommande> {
    return await this.service.createLigneCommande({
      data: {
        ...data,

        commande_id: {
          connect: data.commande_id,
        },

        produit_id: {
          connect: data.produit_id,
        },
      },
      select: {
        commande_id: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        prixUnitaire: true,

        produit_id: {
          select: {
            id: true,
          },
        },

        quantit: true,
        remise: true,
        totalLignes: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LigneCommande] })
  @ApiNestedQuery(LigneCommandeFindManyArgs)
  async ligneCommandes(
    @common.Req() request: Request
  ): Promise<LigneCommande[]> {
    const args = plainToClass(LigneCommandeFindManyArgs, request.query);
    return this.service.ligneCommandes({
      ...args,
      select: {
        commande_id: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        prixUnitaire: true,

        produit_id: {
          select: {
            id: true,
          },
        },

        quantit: true,
        remise: true,
        totalLignes: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LigneCommande })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ligneCommande(
    @common.Param() params: LigneCommandeWhereUniqueInput
  ): Promise<LigneCommande | null> {
    const result = await this.service.ligneCommande({
      where: params,
      select: {
        commande_id: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        prixUnitaire: true,

        produit_id: {
          select: {
            id: true,
          },
        },

        quantit: true,
        remise: true,
        totalLignes: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LigneCommande })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLigneCommande(
    @common.Param() params: LigneCommandeWhereUniqueInput,
    @common.Body() data: LigneCommandeUpdateInput
  ): Promise<LigneCommande | null> {
    try {
      return await this.service.updateLigneCommande({
        where: params,
        data: {
          ...data,

          commande_id: {
            connect: data.commande_id,
          },

          produit_id: {
            connect: data.produit_id,
          },
        },
        select: {
          commande_id: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          prixUnitaire: true,

          produit_id: {
            select: {
              id: true,
            },
          },

          quantit: true,
          remise: true,
          totalLignes: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LigneCommande })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLigneCommande(
    @common.Param() params: LigneCommandeWhereUniqueInput
  ): Promise<LigneCommande | null> {
    try {
      return await this.service.deleteLigneCommande({
        where: params,
        select: {
          commande_id: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          prixUnitaire: true,

          produit_id: {
            select: {
              id: true,
            },
          },

          quantit: true,
          remise: true,
          totalLignes: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
