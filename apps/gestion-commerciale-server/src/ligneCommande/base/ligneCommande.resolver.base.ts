/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LigneCommande } from "./LigneCommande";
import { LigneCommandeCountArgs } from "./LigneCommandeCountArgs";
import { LigneCommandeFindManyArgs } from "./LigneCommandeFindManyArgs";
import { LigneCommandeFindUniqueArgs } from "./LigneCommandeFindUniqueArgs";
import { CreateLigneCommandeArgs } from "./CreateLigneCommandeArgs";
import { UpdateLigneCommandeArgs } from "./UpdateLigneCommandeArgs";
import { DeleteLigneCommandeArgs } from "./DeleteLigneCommandeArgs";
import { Commande } from "../../commande/base/Commande";
import { Produit } from "../../produit/base/Produit";
import { LigneCommandeService } from "../ligneCommande.service";
@graphql.Resolver(() => LigneCommande)
export class LigneCommandeResolverBase {
  constructor(protected readonly service: LigneCommandeService) {}

  async _ligneCommandesMeta(
    @graphql.Args() args: LigneCommandeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LigneCommande])
  async ligneCommandes(
    @graphql.Args() args: LigneCommandeFindManyArgs
  ): Promise<LigneCommande[]> {
    return this.service.ligneCommandes(args);
  }

  @graphql.Query(() => LigneCommande, { nullable: true })
  async ligneCommande(
    @graphql.Args() args: LigneCommandeFindUniqueArgs
  ): Promise<LigneCommande | null> {
    const result = await this.service.ligneCommande(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LigneCommande)
  async createLigneCommande(
    @graphql.Args() args: CreateLigneCommandeArgs
  ): Promise<LigneCommande> {
    return await this.service.createLigneCommande({
      ...args,
      data: {
        ...args.data,

        commande_id: {
          connect: args.data.commande_id,
        },

        produit_id: {
          connect: args.data.produit_id,
        },
      },
    });
  }

  @graphql.Mutation(() => LigneCommande)
  async updateLigneCommande(
    @graphql.Args() args: UpdateLigneCommandeArgs
  ): Promise<LigneCommande | null> {
    try {
      return await this.service.updateLigneCommande({
        ...args,
        data: {
          ...args.data,

          commande_id: {
            connect: args.data.commande_id,
          },

          produit_id: {
            connect: args.data.produit_id,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LigneCommande)
  async deleteLigneCommande(
    @graphql.Args() args: DeleteLigneCommandeArgs
  ): Promise<LigneCommande | null> {
    try {
      return await this.service.deleteLigneCommande(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Commande, {
    nullable: true,
    name: "commandeId",
  })
  async getCommandeId(
    @graphql.Parent() parent: LigneCommande
  ): Promise<Commande | null> {
    const result = await this.service.getCommandeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Produit, {
    nullable: true,
    name: "produitId",
  })
  async getProduitId(
    @graphql.Parent() parent: LigneCommande
  ): Promise<Produit | null> {
    const result = await this.service.getProduitId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
