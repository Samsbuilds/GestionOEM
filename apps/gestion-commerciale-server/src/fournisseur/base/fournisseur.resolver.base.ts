/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Fournisseur } from "./Fournisseur";
import { FournisseurCountArgs } from "./FournisseurCountArgs";
import { FournisseurFindManyArgs } from "./FournisseurFindManyArgs";
import { FournisseurFindUniqueArgs } from "./FournisseurFindUniqueArgs";
import { CreateFournisseurArgs } from "./CreateFournisseurArgs";
import { UpdateFournisseurArgs } from "./UpdateFournisseurArgs";
import { DeleteFournisseurArgs } from "./DeleteFournisseurArgs";
import { FournisseurService } from "../fournisseur.service";
@graphql.Resolver(() => Fournisseur)
export class FournisseurResolverBase {
  constructor(protected readonly service: FournisseurService) {}

  async _fournisseursMeta(
    @graphql.Args() args: FournisseurCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Fournisseur])
  async fournisseurs(
    @graphql.Args() args: FournisseurFindManyArgs
  ): Promise<Fournisseur[]> {
    return this.service.fournisseurs(args);
  }

  @graphql.Query(() => Fournisseur, { nullable: true })
  async fournisseur(
    @graphql.Args() args: FournisseurFindUniqueArgs
  ): Promise<Fournisseur | null> {
    const result = await this.service.fournisseur(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Fournisseur)
  async createFournisseur(
    @graphql.Args() args: CreateFournisseurArgs
  ): Promise<Fournisseur> {
    return await this.service.createFournisseur({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Fournisseur)
  async updateFournisseur(
    @graphql.Args() args: UpdateFournisseurArgs
  ): Promise<Fournisseur | null> {
    try {
      return await this.service.updateFournisseur({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Fournisseur)
  async deleteFournisseur(
    @graphql.Args() args: DeleteFournisseurArgs
  ): Promise<Fournisseur | null> {
    try {
      return await this.service.deleteFournisseur(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
