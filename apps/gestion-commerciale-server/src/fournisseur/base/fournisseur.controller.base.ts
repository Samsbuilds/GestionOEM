/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FournisseurService } from "../fournisseur.service";
import { FournisseurCreateInput } from "./FournisseurCreateInput";
import { Fournisseur } from "./Fournisseur";
import { FournisseurFindManyArgs } from "./FournisseurFindManyArgs";
import { FournisseurWhereUniqueInput } from "./FournisseurWhereUniqueInput";
import { FournisseurUpdateInput } from "./FournisseurUpdateInput";

export class FournisseurControllerBase {
  constructor(protected readonly service: FournisseurService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Fournisseur })
  async createFournisseur(
    @common.Body() data: FournisseurCreateInput
  ): Promise<Fournisseur> {
    return await this.service.createFournisseur({
      data: data,
      select: {
        adresse: true,
        createdAt: true,
        email: true,
        id: true,
        nomFournisseur: true,
        produitsLivres: true,
        telephone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Fournisseur] })
  @ApiNestedQuery(FournisseurFindManyArgs)
  async fournisseurs(@common.Req() request: Request): Promise<Fournisseur[]> {
    const args = plainToClass(FournisseurFindManyArgs, request.query);
    return this.service.fournisseurs({
      ...args,
      select: {
        adresse: true,
        createdAt: true,
        email: true,
        id: true,
        nomFournisseur: true,
        produitsLivres: true,
        telephone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Fournisseur })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fournisseur(
    @common.Param() params: FournisseurWhereUniqueInput
  ): Promise<Fournisseur | null> {
    const result = await this.service.fournisseur({
      where: params,
      select: {
        adresse: true,
        createdAt: true,
        email: true,
        id: true,
        nomFournisseur: true,
        produitsLivres: true,
        telephone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Fournisseur })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFournisseur(
    @common.Param() params: FournisseurWhereUniqueInput,
    @common.Body() data: FournisseurUpdateInput
  ): Promise<Fournisseur | null> {
    try {
      return await this.service.updateFournisseur({
        where: params,
        data: data,
        select: {
          adresse: true,
          createdAt: true,
          email: true,
          id: true,
          nomFournisseur: true,
          produitsLivres: true,
          telephone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Fournisseur })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFournisseur(
    @common.Param() params: FournisseurWhereUniqueInput
  ): Promise<Fournisseur | null> {
    try {
      return await this.service.deleteFournisseur({
        where: params,
        select: {
          adresse: true,
          createdAt: true,
          email: true,
          id: true,
          nomFournisseur: true,
          produitsLivres: true,
          telephone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
