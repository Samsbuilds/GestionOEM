/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommandeService } from "../commande.service";
import { CommandeCreateInput } from "./CommandeCreateInput";
import { Commande } from "./Commande";
import { CommandeFindManyArgs } from "./CommandeFindManyArgs";
import { CommandeWhereUniqueInput } from "./CommandeWhereUniqueInput";
import { CommandeUpdateInput } from "./CommandeUpdateInput";
import { FactureFindManyArgs } from "../../facture/base/FactureFindManyArgs";
import { Facture } from "../../facture/base/Facture";
import { FactureWhereUniqueInput } from "../../facture/base/FactureWhereUniqueInput";
import { LigneCommandeFindManyArgs } from "../../ligneCommande/base/LigneCommandeFindManyArgs";
import { LigneCommande } from "../../ligneCommande/base/LigneCommande";
import { LigneCommandeWhereUniqueInput } from "../../ligneCommande/base/LigneCommandeWhereUniqueInput";

export class CommandeControllerBase {
  constructor(protected readonly service: CommandeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Commande })
  async createCommande(
    @common.Body() data: CommandeCreateInput
  ): Promise<Commande> {
    return await this.service.createCommande({
      data: {
        ...data,

        client_id: data.client_id
          ? {
              connect: data.client_id,
            }
          : undefined,
      },
      select: {
        ateCommande: true,

        client_id: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        etat: true,
        id: true,
        montantTotal: true,
        numeroCommande: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Commande] })
  @ApiNestedQuery(CommandeFindManyArgs)
  async commandes(@common.Req() request: Request): Promise<Commande[]> {
    const args = plainToClass(CommandeFindManyArgs, request.query);
    return this.service.commandes({
      ...args,
      select: {
        ateCommande: true,

        client_id: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        etat: true,
        id: true,
        montantTotal: true,
        numeroCommande: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Commande })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async commande(
    @common.Param() params: CommandeWhereUniqueInput
  ): Promise<Commande | null> {
    const result = await this.service.commande({
      where: params,
      select: {
        ateCommande: true,

        client_id: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        etat: true,
        id: true,
        montantTotal: true,
        numeroCommande: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Commande })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCommande(
    @common.Param() params: CommandeWhereUniqueInput,
    @common.Body() data: CommandeUpdateInput
  ): Promise<Commande | null> {
    try {
      return await this.service.updateCommande({
        where: params,
        data: {
          ...data,

          client_id: data.client_id
            ? {
                connect: data.client_id,
              }
            : undefined,
        },
        select: {
          ateCommande: true,

          client_id: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          etat: true,
          id: true,
          montantTotal: true,
          numeroCommande: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Commande })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCommande(
    @common.Param() params: CommandeWhereUniqueInput
  ): Promise<Commande | null> {
    try {
      return await this.service.deleteCommande({
        where: params,
        select: {
          ateCommande: true,

          client_id: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          etat: true,
          id: true,
          montantTotal: true,
          numeroCommande: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/factures")
  @ApiNestedQuery(FactureFindManyArgs)
  async findFactures(
    @common.Req() request: Request,
    @common.Param() params: CommandeWhereUniqueInput
  ): Promise<Facture[]> {
    const query = plainToClass(FactureFindManyArgs, request.query);
    const results = await this.service.findFactures(params.id, {
      ...query,
      select: {
        createdAt: true,
        dateFacture: true,
        id: true,
        montantTotal: true,
        numeroFacture: true,
        statutPaiment: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/factures")
  async connectFactures(
    @common.Param() params: CommandeWhereUniqueInput,
    @common.Body() body: FactureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      factures: {
        connect: body,
      },
    };
    await this.service.updateCommande({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/factures")
  async updateFactures(
    @common.Param() params: CommandeWhereUniqueInput,
    @common.Body() body: FactureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      factures: {
        set: body,
      },
    };
    await this.service.updateCommande({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/factures")
  async disconnectFactures(
    @common.Param() params: CommandeWhereUniqueInput,
    @common.Body() body: FactureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      factures: {
        disconnect: body,
      },
    };
    await this.service.updateCommande({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/ligneCommandes")
  @ApiNestedQuery(LigneCommandeFindManyArgs)
  async findLigneCommandes(
    @common.Req() request: Request,
    @common.Param() params: CommandeWhereUniqueInput
  ): Promise<LigneCommande[]> {
    const query = plainToClass(LigneCommandeFindManyArgs, request.query);
    const results = await this.service.findLigneCommandes(params.id, {
      ...query,
      select: {
        commande_id: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        prixUnitaire: true,

        produit_id: {
          select: {
            id: true,
          },
        },

        quantit: true,
        remise: true,
        totalLignes: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ligneCommandes")
  async connectLigneCommandes(
    @common.Param() params: CommandeWhereUniqueInput,
    @common.Body() body: LigneCommandeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ligneCommandes: {
        connect: body,
      },
    };
    await this.service.updateCommande({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ligneCommandes")
  async updateLigneCommandes(
    @common.Param() params: CommandeWhereUniqueInput,
    @common.Body() body: LigneCommandeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ligneCommandes: {
        set: body,
      },
    };
    await this.service.updateCommande({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ligneCommandes")
  async disconnectLigneCommandes(
    @common.Param() params: CommandeWhereUniqueInput,
    @common.Body() body: LigneCommandeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ligneCommandes: {
        disconnect: body,
      },
    };
    await this.service.updateCommande({
      where: params,
      data,
      select: { id: true },
    });
  }
}
